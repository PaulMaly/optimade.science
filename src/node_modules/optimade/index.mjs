function unfetch_module(e,n){return n=n||{},new Promise(function(t,r){var s=new XMLHttpRequest,o=[],u=[],i={},a=function(){return {ok:2==(s.status/100|0),statusText:s.statusText,status:s.status,url:s.responseURL,text:function(){return Promise.resolve(s.responseText)},json:function(){return Promise.resolve(s.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([s.response]))},clone:a,headers:{keys:function(){return o},entries:function(){return u},get:function(e){return i[e.toLowerCase()]},has:function(e){return e.toLowerCase()in i}}}};for(var l in s.open(n.method||"get",e,!0),s.onload=function(){s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,function(e,n,t){o.push(n=n.toLowerCase()),u.push([n,t]),i[n]=i[n]?i[n]+","+t:t;}),t(a());},s.onerror=r,s.withCredentials="include"==n.credentials,n.headers)s.setRequestHeader(l,n.headers[l]);s.send(n.body||null);})}

var unfetch_module$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': unfetch_module
});

function getAugmentedNamespace(n) {
	if (n.__esModule) return n;
	var a = Object.defineProperty({}, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var require$$0 = /*@__PURE__*/getAugmentedNamespace(unfetch_module$1);

var browser = self.fetch || (self.fetch = require$$0.default || require$$0);

const baseURL = 'https://cors.optimade.science';
const providersURL = `https://providers.optimade.science/providers.json`;
const providersCorsURL = `${baseURL}/${providersURL.replace('://', '/')}`;

async function getJSON(uri, params = null, headers = {}) {
    const url = new URL(uri);
    if (params) {
        Object.entries(params).forEach((param) => url.searchParams.append(...param));
    }
    const res = await fetch(url.toString(), { headers });
    if (!res.ok) {
        const err = new Error(res.statusText);
        err.response = res;
        throw err;
    }
    if (res.status !== 204) {
        return await res.json();
    }
}
async function getProviders() {
    return getJSON(providersCorsURL);
}

export { getJSON, getProviders };
