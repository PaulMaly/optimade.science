self.fetch||(self.fetch=function(e,n){return n=n||{},new Promise(function(t,s){var r=new XMLHttpRequest,o=[],u=[],i={},a=function(){return {ok:2==(r.status/100|0),statusText:r.statusText,status:r.status,url:r.responseURL,text:function(){return Promise.resolve(r.responseText)},json:function(){return Promise.resolve(r.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([r.response]))},clone:a,headers:{keys:function(){return o},entries:function(){return u},get:function(e){return i[e.toLowerCase()]},has:function(e){return e.toLowerCase()in i}}}};for(var c in r.open(n.method||"get",e,!0),r.onload=function(){r.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,function(e,n,t){o.push(n=n.toLowerCase()),u.push([n,t]),i[n]=i[n]?i[n]+","+t:t;}),t(a());},r.onerror=s,r.withCredentials="include"==n.credentials,n.headers)r.setRequestHeader(c,n.headers[c]);r.send(n.body||null);})});

const CORS_PROXY_URL = 'https://cors.optimade.science';
//export const PROVIDERS_URL = 'https://providers.optimade.org/providers.json';
const PROVIDERS_URL = 'https://providers.optimade.science/providers.json';

async function getJSON(uri, params = null, headers = {}) {
    const url = new URL(uri);
    if (params) {
        Object.entries(params).forEach((param) => url.searchParams.append(...param));
    }
    const res = await fetch(url.toString(), { headers });
    if (!res.ok) {
        const err = new Error(res.statusText);
        err.response = res;
        throw err;
    }
    if (res.status !== 204) {
        return await res.json();
    }
}
async function getProviders() {
    const providers = await getJSON(corsUrl(PROVIDERS_URL));
    providers.data = providers.data.filter(isProviderValid);
    return providers;
}
async function getApis(provider, version = '') {
    const url = `${provider.attributes.base_url}${version ? `/${version}` : ''}/info`;
    const apis = await getJSON(corsUrl(url));
    apis.data = apiVersion(apis);
    return apis;
}
async function getStructures(api, filter = '') {
    const url = apiVersionUrl(api);
    return getJSON(`${corsUrl(url).replace(/\/$/, '')}/structures?filter=${filter}`);
}
function apiVersionUrl({ attributes: { api_version, available_api_versions } }) {
    let url = available_api_versions[api_version];
    if (!url && Array.isArray(available_api_versions)) {
        const api = available_api_versions.find(({ version }) => version === api_version);
        url = api && api.url;
    }
    return url;
}
function apiVersion({ data, meta }) {
    return Array.isArray(data) ?
        data.find(({ attributes }) => attributes.api_version === meta.api_version) :
        data;
}
function isProviderValid(provider) {
    return provider.attributes.base_url && !provider.attributes.base_url.includes('example');
}
function corsUrl(url) {
    return `${CORS_PROXY_URL}/${url.replace('://', '/')}`;
}

export { apiVersion, apiVersionUrl, corsUrl, getApis, getJSON, getProviders, getStructures, isProviderValid };
