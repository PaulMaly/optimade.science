import 'unfetch/polyfill';

import type * as Types from './types';
export type { Types };

import { CORS_PROXY_URL, PROVIDERS_URL } from '../optimade.config.js';

export async function getJSON(uri: string, params: {} = null, headers: {} = {}) {

    const url = new URL(uri);

    if (params) {
        Object.entries(params).forEach((param: [string, any]) => url.searchParams.append(...param));
    }

    const res = await fetch(url.toString(), { headers });

    if (!res.ok) {
        const err: Types.ResponseError = new Error(res.statusText);
        err.response = res;
        throw err;
    }

    if (res.status !== 204) {
        return await res.json();
    }
}

export async function getProviders(): Promise<Types.ProvidersResponse> {
    const providers: Types.ProvidersResponse = await getJSON(corsUrl(PROVIDERS_URL));
    providers.data = providers.data.filter(isProviderValid);
    return providers;
}

export async function getApis(provider: Types.Provider, version: string = ''): Promise<Types.InfoResponse> {
    const url: string = `${provider.attributes.base_url}${version ? `/${version}` : ''}/info`;
    const apis: Types.InfoResponse = await getJSON(corsUrl(url));
    apis.data = apiVersion(apis);
    return apis;
}

export async function getStructures(api: Types.Api, filter: string = ''): Promise<Types.StructuresResponse | null> {

    // if (!api.attributes.available_endpoints.includes('structures') || !filter) return null;

    const url = apiVersionUrl(api);

    return getJSON(`${corsUrl(url).replace(/\/$/, '')}/structures?filter=${filter}`);
}

export function apiVersionUrl({ attributes: { api_version, available_api_versions } }: Types.Api) {
    let url = available_api_versions[api_version];
    if (!url && Array.isArray(available_api_versions)) {
        const api = available_api_versions.find(({ version }) => version === api_version);
        url = api && api.url;
    }
    return url;
}

export function apiVersion({ data, meta }: Types.InfoResponse): Types.Api {
    return Array.isArray(data) ?
        data.find(({ attributes }) => attributes.api_version === meta.api_version) :
        data;
}

export function isProviderValid(provider: Types.Provider) {
    return provider.attributes.base_url && !provider.attributes.base_url.includes('example');
}

export function corsUrl(url) {
    return `${CORS_PROXY_URL}/${url.replace('://', '/')}`;
}